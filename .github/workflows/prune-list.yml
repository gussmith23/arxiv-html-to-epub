name: Move already-read papers to archive

on:
  workflow_dispatch:

env:
  PAPER_LIST_ISSUE_NO: 1
  ARCHIVE_LIST_ISSUE_NO: 2
  AUTHOR: gussmith23

jobs:
  run:
    runs-on: ubuntu-latest
    permissions:
      # Needed for posting converted files to the repo.
      issues: write

    steps:
      - name: Move already-read papers to archive
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ env.PAPER_LIST_ISSUE_NO }}
            });

            // Filter comments that have a :+1: reaction from ${{ env.AUTHOR }}.

            const commentsAndDetails = await Promise.all(comments.map((comment) => {
              return Promise.all([Promise.resolve(comment), github.request(comment.reactions.url).then(({ data }) => data)]);
            }));

            const filteredComments = commentsAndDetails.filter(([comment, reactionDetails]) => {
              return reactionDetails.some((reaction) => {
                console.log(reaction);
                console.log(reaction["user"]["login"] === "${{ env.AUTHOR }}");
                console.log(reaction["content"] === "+1");
                return reaction["user"]["login"] === "${{ env.AUTHOR }}" && reaction["content"] === "+1";
              });
            });

            console.log(`Moving the following comments to the archive list issue:\n ${filteredComments.map((comment) => JSON.stringify(comment)).join("\n")}`);
            return;

            // Move the comments to the archive list issue.
            for (const comment of filteredComments) {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ env.ARCHIVE_LIST_ISSUE_NO }},
                body: comment.body
              });
              await github.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }